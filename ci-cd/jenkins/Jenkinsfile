pipeline {
    agent any
    
    parameters {
        choice(
            name: 'BROWSER',
            choices: ['chromium', 'firefox', 'webkit', 'all'],
            description: 'Browser to run tests on'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production', 'development'],
            description: 'Environment to run tests against'
        )
        string(
            name: 'TAGS',
            defaultValue: '@smoke',
            description: 'Cucumber tags to run (e.g., @smoke, @regression, @smoke and @ui)'
        )
        booleanParam(
            name: 'HEADLESS',
            defaultValue: true,
            description: 'Run tests in headless mode'
        )
        choice(
            name: 'PARALLEL_WORKERS',
            choices: ['1', '2', '4', '8'],
            description: 'Number of parallel workers'
        )
    }
    
    environment {
        NODE_VERSION = '18'
        PLAYWRIGHT_BROWSERS_PATH = "${WORKSPACE}/pw-browsers"
        
        // Test configuration
        HEADLESS = "${params.HEADLESS}"
        BROWSER = "${params.BROWSER}"
        TAGS = "${params.TAGS}"
        PARALLEL_WORKERS = "${params.PARALLEL_WORKERS}"
        TEST_ENV = "${params.ENVIRONMENT}"
        
        // CI environment variables
        CI = 'true'
        JENKINS = 'true'
        BUILD_NUMBER = "${BUILD_NUMBER}"
        BUILD_URL = "${BUILD_URL}"
        
        // Reporting
        SCREENSHOT = 'failure'
        VIDEO = 'failure'
        TRACE = 'retain-on-failure'
        
        // Credentials
        JIRA_USERNAME = credentials('jira-username')
        JIRA_API_TOKEN = credentials('jira-api-token')
        SLACK_WEBHOOK_URL = credentials('slack-webhook-url')
        TESTRAIL_USERNAME = credentials('testrail-username')
        TESTRAIL_API_KEY = credentials('testrail-api-key')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                
                script {
                    // Set build description
                    currentBuild.description = "Browser: ${params.BROWSER} | Env: ${params.ENVIRONMENT} | Tags: ${params.TAGS}"
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    // Install Node.js
                    def nodeHome = tool name: 'NodeJS-18', type: 'nodejs'
                    env.PATH = "${nodeHome}/bin:${env.PATH}"
                }
                
                // Setup environment file
                sh '''
                    cp .env.example .env
                    echo "BROWSER=${BROWSER}" >> .env
                    echo "HEADLESS=${HEADLESS}" >> .env
                    echo "TEST_ENV=${ENVIRONMENT}" >> .env
                    echo "CI=true" >> .env
                    echo "JENKINS=true" >> .env
                    echo "BUILD_NUMBER=${BUILD_NUMBER}" >> .env
                    echo "BUILD_URL=${BUILD_URL}" >> .env
                    echo "PARALLEL_WORKERS=${PARALLEL_WORKERS}" >> .env
                '''
                
                // Install dependencies
                sh 'npm ci'
                
                // Install Playwright browsers
                sh 'npm run install:browsers'
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Type Check') {
                    steps {
                        sh 'npm run type-check'
                    }
                }
                
                stage('Lint') {
                    steps {
                        sh 'npm run lint'
                        
                        // Publish lint results
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'reports',
                            reportFiles: 'lint-report.html',
                            reportName: 'ESLint Report',
                            reportTitles: 'Code Quality Report'
                        ])
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        // Run npm audit
                        sh 'npm audit --audit-level moderate --json > reports/security-audit.json || true'
                        
                        // Archive security report
                        archiveArtifacts artifacts: 'reports/security-audit.json', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    def browsers = params.BROWSER == 'all' ? ['chromium', 'firefox', 'webkit'] : [params.BROWSER]
                    def testStages = [:]
                    
                    browsers.each { browser ->
                        testStages["Test-${browser}"] = {
                            stage("Test ${browser}") {
                                sh """
                                    mkdir -p reports screenshots traces
                                    
                                    npx cucumber-js features/ \\
                                        --require-module ts-node/register \\
                                        --require src/steps/**/*.ts \\
                                        --tags "${params.TAGS}" \\
                                        --format json:reports/cucumber-report-${browser}.json \\
                                        --format html:reports/cucumber-report-${browser}.html \\
                                        --parallel ${params.PARALLEL_WORKERS} \\
                                        --retry 1 \\
                                        --format-options '{"snippetInterface": "async-await"}' \\
                                        --world-parameters '{"browser": "${browser}"}'
                                """
                                
                                // Generate enhanced reports
                                sh """
                                    mv reports/cucumber-report-${browser}.json reports/cucumber-report.json
                                    npm run report:generate
                                    mv reports/index.html reports/index-${browser}.html
                                    mv reports/test-summary.json reports/test-summary-${browser}.json
                                """
                            }
                        }
                    }
                    
                    // Run tests in parallel
                    parallel testStages
                }
            }
            
            post {
                always {
                    // Archive test artifacts
                    archiveArtifacts artifacts: '''
                        reports/**/*,
                        screenshots/**/*,
                        traces/**/*
                    ''', allowEmptyArchive: true
                    
                    // Publish HTML reports
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports',
                        reportFiles: 'index*.html',
                        reportName: 'Test Report',
                        reportTitles: 'Playwright Cucumber Test Results'
                    ])
                    
                    // Publish Cucumber results
                    publishCucumberResults(
                        buildStatus: 'UNSTABLE',
                        failedFeaturesNumber: 1,
                        failedScenariosNumber: 1,
                        failedStepsNumber: 1,
                        fileIncludePattern: 'reports/cucumber-report*.json',
                        pendingStepsNumber: 0,
                        skippedStepsNumber: 0,
                        sortingMethod: 'ALPHABETICAL',
                        undefinedStepsNumber: 0
                    )
                }
                
                failure {
                    // Capture additional debug info on failure
                    sh '''
                        echo "=== System Information ===" > debug-info.txt
                        uname -a >> debug-info.txt
                        node --version >> debug-info.txt
                        npm --version >> debug-info.txt
                        npx playwright --version >> debug-info.txt
                        echo "=== Environment Variables ===" >> debug-info.txt
                        env | grep -E "(BROWSER|HEADLESS|TEST_ENV|CI)" >> debug-info.txt
                    '''
                    
                    archiveArtifacts artifacts: 'debug-info.txt', allowEmptyArchive: true
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                // Merge all browser reports
                sh '''
                    mkdir -p merged-reports
                    cp reports/cucumber-report*.json merged-reports/ 2>/dev/null || true
                    
                    if [ "$(ls -A merged-reports/)" ]; then
                        node -e "
                        const report = require('multiple-cucumber-html-reporter');
                        report.generate({
                            jsonDir: 'merged-reports',
                            reportPath: 'merged-reports',
                            reportName: 'Combined Test Results - Jenkins Build #${BUILD_NUMBER}',
                            pageTitle: 'Playwright Cucumber Test Results',
                            displayDuration: true,
                            displayReportTime: true,
                            metadata: {
                                browser: { name: '${BROWSER}', version: 'Latest' },
                                device: 'CI/CD',
                                platform: { name: 'Linux', version: 'Ubuntu' },
                                buildNumber: '${BUILD_NUMBER}',
                                buildUrl: '${BUILD_URL}',
                                environment: '${ENVIRONMENT}'
                            },
                            customData: {
                                title: 'Build Information',
                                data: [
                                    { label: 'Jenkins Build', value: '#${BUILD_NUMBER}' },
                                    { label: 'Build URL', value: '${BUILD_URL}' },
                                    { label: 'Environment', value: '${ENVIRONMENT}' },
                                    { label: 'Browser', value: '${BROWSER}' },
                                    { label: 'Tags', value: '${TAGS}' },
                                    { label: 'Parallel Workers', value: '${PARALLEL_WORKERS}' }
                                ]
                            }
                        });
                        "
                    fi
                '''
                
                // Publish merged report
                publishHTML([
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'merged-reports',
                    reportFiles: 'index.html',
                    reportName: 'Combined Test Report',
                    reportTitles: 'All Browsers - Test Results'
                ])
            }
        }
        
        stage('Update Test Management') {
            parallel {
                stage('Update Jira') {
                    when {
                        expression { env.JIRA_USERNAME && env.JIRA_API_TOKEN }
                    }
                    steps {
                        script {
                            // Update Jira with test results
                            sh '''
                                if [ -f "reports/test-summary.json" ]; then
                                    node -e "
                                    const fs = require('fs');
                                    const summary = JSON.parse(fs.readFileSync('reports/test-summary.json', 'utf8'));
                                    console.log('Test Summary for Jira:');
                                    console.log('Total: ' + summary.scenarios.total);
                                    console.log('Passed: ' + summary.scenarios.passed);
                                    console.log('Failed: ' + summary.scenarios.failed);
                                    console.log('Success Rate: ' + summary.scenarios.successRate + '%');
                                    "
                                fi
                            '''
                        }
                    }
                }
                
                stage('Update TestRail') {
                    when {
                        expression { env.TESTRAIL_USERNAME && env.TESTRAIL_API_KEY }
                    }
                    steps {
                        script {
                            // Update TestRail with results
                            echo "Updating TestRail with test results..."
                            // Implementation would go here
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean workspace but keep reports
            script {
                // Calculate test statistics
                def testSummary = [:]
                try {
                    def summaryFile = readFile('reports/test-summary.json')
                    testSummary = readJSON text: summaryFile
                } catch (Exception e) {
                    echo "Could not read test summary: ${e.getMessage()}"
                }
                
                // Set build result based on test results
                if (testSummary.scenarios?.failed > 0) {
                    currentBuild.result = 'UNSTABLE'
                } else if (testSummary.scenarios?.total == 0) {
                    currentBuild.result = 'FAILURE'
                    currentBuild.description += " | NO TESTS RUN"
                } else {
                    currentBuild.result = 'SUCCESS'
                    currentBuild.description += " | ${testSummary.scenarios?.successRate}% PASS RATE"
                }
            }
        }
        
        success {
            echo "✅ All tests passed successfully!"
            
            // Send success notification
            script {
                if (env.SLACK_WEBHOOK_URL) {
                    slackSend(
                        channel: '#test-results',
                        color: 'good',
                        message: """
                        ✅ *Playwright Tests Passed* 
                        Build: #${BUILD_NUMBER}
                        Environment: ${params.ENVIRONMENT}
                        Browser: ${params.BROWSER}
                        Tags: ${params.TAGS}
                        Duration: ${currentBuild.durationString}
                        Report: ${BUILD_URL}Test_Report/
                        """.stripIndent()
                    )
                }
            }
        }
        
        unstable {
            echo "⚠️ Some tests failed!"
            
            // Send unstable notification
            script {
                if (env.SLACK_WEBHOOK_URL) {
                    slackSend(
                        channel: '#test-results',
                        color: 'warning',
                        message: """
                        ⚠️ *Playwright Tests Unstable*
                        Build: #${BUILD_NUMBER}
                        Environment: ${params.ENVIRONMENT}
                        Browser: ${params.BROWSER}
                        Tags: ${params.TAGS}
                        Duration: ${currentBuild.durationString}
                        Report: ${BUILD_URL}Test_Report/
                        """.stripIndent()
                    )
                }
            }
        }
        
        failure {
            echo "❌ Build failed!"
            
            // Send failure notification
            script {
                if (env.SLACK_WEBHOOK_URL) {
                    slackSend(
                        channel: '#test-results',
                        color: 'danger',
                        message: """
                        ❌ *Playwright Tests Failed*
                        Build: #${BUILD_NUMBER}
                        Environment: ${params.ENVIRONMENT}
                        Browser: ${params.BROWSER}
                        Tags: ${params.TAGS}
                        Duration: ${currentBuild.durationString}
                        Logs: ${BUILD_URL}console
                        """.stripIndent()
                    )
                }
            }
        }
        
        cleanup {
            // Clean up old artifacts but keep recent ones
            script {
                sh '''
                    # Keep only last 10 builds worth of screenshots
                    find screenshots/ -name "*.png" -mtime +10 -delete 2>/dev/null || true
                    
                    # Clean up large trace files older than 7 days
                    find traces/ -name "*.zip" -mtime +7 -delete 2>/dev/null || true
                '''
            }
        }
    }
}